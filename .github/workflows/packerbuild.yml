---
name: Build AMI Packer
on:
  push:
    branches:
      - main
jobs:
  ami-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Waiting for integration test
        uses: lewagon/wait-on-check-action@v1.3.1
        with: 
          ref: ${{ github.ref }}
          check-name: CI
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 20
          allowed-conclusions: success
      - name: Creating a ZIP
        run: zip -r webapp.zip .
      - name: AWS Configure for AMI Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Initialization
        run: |
          packer init aws.pkr.hcl
      - name: Build AMI and Extract AMI ID
        id: build-ami
        run: |
          packer build aws.pkr.hcl | tee packer-output.log
          AMI_ID=$(grep -oP 'AMI: \K(ami-[a-zA-Z0-9]+)' packer-output.log)
          echo "AMI_ID=$AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "::set-output name=ami_id::$AMI_ID"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AMI_USER_DEMO: ${{secrets.AMI_USER_DEMO}}
          PKR_VAR_aws_region: ${{ secrets.AWS_REGION }}
          PKR_VAR_source_ami: ${{ vars.SOURCE_AMI }}
          PKR_VAR_subnet_id: ${{ secrets.SUBNET_ID }}
          PKR_VAR_ssh_username: ${{ secrets.SSH_USERNAME }}
          PKR_VAR_aws_profile: ${{ secrets.aws_profile }}
          PKR_VAR_ami_users: ${{ secrets.ami_users }}
      - name: AWS Configure for Demo Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_ACCOUNT_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMO_ACCOUNT_SECRET_KEY }}
          aws-region: us-west-2
      - name: Check Launch Template Existence in Demo Account
        id: check-template-demo
        run: >
          TEMPLATE_EXISTS="false"

          if aws ec2 describe-launch-templates --launch-template-names ${{ secrets.LT_NAME }} --query 'LaunchTemplates[0]' --output text; then
            TEMPLATE_EXISTS="true"
          fi

          echo "TEMPLATE_EXISTS=$TEMPLATE_EXISTS" >> $GITHUB_ENV
      - name: Update Launch Template
        if: env.TEMPLATE_EXISTS == 'true'
        run: >
          aws ec2 create-launch-template-version --launch-template-name ${{
          secrets.LT_NAME }} --source-version "\$Default" --launch-template-data
          "{\"ImageId\":\"${{ env.AMI_ID }}\"}"
      - name: Refresh Auto-Scaling Group
        if: env.TEMPLATE_EXISTS == 'true'
        run: >
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{
          secrets.ASG_NAME }} --strategy "Rolling"


          while : ; do
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ secrets.ASG_NAME }} --query 'InstanceRefreshes[0].Status' --output text)
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh completed with status: $STATUS"
              break
            elif [[ "$STATUS" == "Cancelled" ]]; then
              echo "Instance refresh failed"
              exit 1
            else
              echo "Waiting for instance refresh..."
              sleep 30
            fi
          done
